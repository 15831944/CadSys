<#@ template debug="true" hostSpecific="true" #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>

<#@ assembly name="System.Xml.Linq.dll" #>
<#@ assembly name="System.Xml.ReaderWriter.dll" #>
<#@ assembly name="System.Runtime.dll" #>
<#@ assembly name="System.IO.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq"#>
<# XDocument doc = XDocument.Load(this.Host.ResolvePath("Dictionary.xml"));
var groups = doc.Descendants("Dictionary").GroupBy(x=>x.Element("DICTIONARYCODE").Value);
WriteLine("using CS.Data.Entities;");
WriteLine("using Microsoft.EntityFrameworkCore;");
WriteLine("namespace CS.EF");
WriteLine ("{");
WriteLine("    public static partial class CadSysContextExtensions");
WriteLine("    {");
WriteLine("        public static void DictionaryTemplateAdditions(ModelBuilder modelBuilder)");
WriteLine("        {");
Dictionary<string,string> echivalEnums = new Dictionary<string,string>()
{ 
    {"COUNTRY", "Judet"},
     
};
foreach(var g in groups)
{
    WriteLine ("    modelBuilder.Entity<" + g.Key + ">().HasData(");
    var last = g.Last();
    foreach (var item in g)
    {
        WriteLine("             new "+ g.Key + "{ Id = " + item.Element("DICTIONARYITEMID").Value + ", "
                                                + "Denumire = \"" + item.Element("DICTIONARYITEMCODE").Value +  "\","
                                                + "Descriere = \"" + item.Element("DICTIONARYITEMNAME").Value +
                                             "\"}" + (item.Equals(last) ? "" : ","));
        Console.WriteLine($"\t{item.Element("DICTIONARYITEMCODE").Value}; {item.Element("DICTIONARYITEMNAME").Value}");
    }
    WriteLine("        );");

}
WriteLine("        }");
WriteLine("    }");
WriteLine("}");
#>